# syntax=docker/dockerfile:experimental

# Stage 1 - the build process
FROM node:alpine as build
WORKDIR /app

RUN apk add --no-cache openssh-client git

# add credentials on build & make sure your domain is accepted
RUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

COPY package.json yarn.lock ./
RUN --mount=type=ssh yarn
COPY . /app
RUN touch /app/.env
RUN echo "REACT_APP_APIKEY=$REACT_APP_APIKEY" >> /app/.env
RUN echo "REACT_APP_AUTHDOMAIN=$REACT_APP_AUTHDOMAIN" >> /app/.env
RUN echo "REACT_APP_DATABASEURL=$REACT_APP_DATABASEURL" >> /app/.env
RUN echo "REACT_APP_PROJECTID=$REACT_APP_PROJECTID" >> /app/.env
RUN echo "REACT_APP_STORAGEBUCKET=$REACT_APP_STORAGEBUCKET" >> /app/.env
RUN echo "REACT_APP_MESSAGINGSENDERID=$REACT_APP_MESSAGINGSENDERID" >> /app/.env
RUN echo "REACT_APP_APPID=$REACT_APP_APPID" >> /app/.env
RUN echo "REACT_APP_MEASUREMENTID=$REACT_APP_MEASUREMENTID" >> /app/.env
RUN echo "REACT_APP_GOOGLEANALYTICS=$REACT_APP_GOOGLEANALYTICS" >> /app/.env
RUN yarn build

# Stage 2 - the production environment
FROM nginx:alpine
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
